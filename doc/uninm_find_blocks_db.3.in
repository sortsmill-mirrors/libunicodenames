.Dd August 9, 2013
.\"
.\" Copyright (C) 2013 Khaled Hosny and Barry Schwartz
.\"
.\" This file is part of LibUnicodeNames.
.\" 
.\" LibUnicodeNames is free software: you can redistribute it and/or
.\" modify it under the terms of the GNU Lesser General Public License
.\" as published by the Free Software Foundation, either version 3 of
.\" the License, or (at your option) any later version.
.\" 
.\" LibUnicodeNames is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" Lesser General Public License for more details.
.\" 
.\" You should have received a copy of the GNU Lesser General Public
.\" License along with LibUnicodeNames.  If not, see
.\" <http://www.gnu.org/licenses/>.
.\"
.\" This manpage is written in mdoc. See groff_mdoc(7).
.\"
.Dt UNINM_FIND_BLOCKS_DB 3
.Os
.Sh NAME
.Nm uninm_find_blocks_db ,
.Nm uninm_blocks_db_open ,
.Nm uninm_blocks_db_close ,
.Nm uninm_name ,
.Nm uninm_annotation
.Nd retrieve names and annotations of Unicode code points
.Sh LIBRARY
.Lb libunicodenames
.Sh SYNOPSIS
.In libunicodenames.h
.Ft "char *"
.Fn uninm_find_blocks_db "const char *locale_base"
.Ft uninm_blocks_db
.Fn uninm_blocks_db_open "const char *filename"
.Ft void
.Fn uninm_blocks_db_close "uninm_blocks_db handle"
.Ft size_t
.Fn uninm_num_blocks "uninm_blocks_db handle"
.Ft "unsigned int"
.Fn uninm_block_start "uninm_blocks_db handle" "int block_number"
.Ft "unsigned int"
.Fn uninm_block_end "uninm_blocks_db handle" "int block_number"
.Ft "const char *"
.Fn uninm_block_name "uninm_blocks_db handle" "int block_number"
.Sh DESCRIPTION
The
.Fn uninm_find_blocks_db
function returns the path of the blocks database for the current
locale. The caller should call
.Fn free 3
on the string when done with it.
If
.Ar locale_base
is not
.Dv NULL ,
then use it as the base directory for MO (compiled gettext) files;
otherwise use the compiled-in locale directory.
Databases accessible through the compiled-in directory are
.Ar "%%pkgdatadir%%/en.blocks-db"
and
.Ar "%%pkgdatadir%%/fr.blocks-db" ,
corresponding to English and French locales, respectively.
.Pp
The
.Fn uninm_blocks_db_open
function open a blocks database, given its path, returning an opaque
pointer to act as a handle.
.Pp
The
.Fn uninm_blocks_db_close
closes a blocks database, given its handle.  Afterwards the value of
.Ar handle
is meaningless.
.Pp
To read the data, given an open blocks database handle, use the
.Fn uninm_num_blocks ,
.Fn uninm_block_start ,
.Fn uninm_block_end ,
and
.Fn uninm_block_name
functions. The
.Fn uninm_num_blocks
function returns the total number of blocks. In calls to the other
functions, the blocks are identified by their number starting from
zero. The
.Fn uninm_block_start
and
.Fn uninm_block_end
functions return, respectively, the least-valued and greatest-valued
code points in the block. The
.Fn uninm_block_name
function returns the name string of the block; the caller must not try
to free the string.
.\" .Sh IMPLEMENTATION NOTES
.Sh RETURN VALUES
On success, the
.Fn uninm_find_blocks_db
function returns a pointer to a null-terminated string, which
eventually should be freed by calling
.Fn free 3 .
On failure,
.Fn uninm_find_blocks_db
returns
.Dv NULL .
.Pp
On success, the
.Fn uninm_blocks_db_open
function returns an open handle for a blocks database. On failure, it returns
.Dv NULL .
.Pp
The
.Fn uninm_num_blocks
function returns the total number of Unicode blocks. There is no
return value to indicate an error.
.Pp
On success, the
.Fn uninm_block_start
and
.Fn uninm_block_end
functions return a Unicode code point. On failure (due to an out of
range block number) they return 0xffffffff.
.Pp
On success, the
.Fn uninm_block_name
function returns a pointer to a null-terminated string containing the
name of the Unicode block; on failure it returns
.Dv NULL .
The caller
.Em "must not"
call
.Fn free 3
with the string.
.Sh FILES
.Ar "%%pkgdatadir%%/en.blocks-db" ,
.Ar "%%pkgdatadir%%/fr.blocks-db"
.Sh EXAMPLE
The following program prints the start points, end points, and names
of the Unicode blocks.
.Bd -literal -offset indent
#include <libunicodenames.h>
#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

int
main (int argc, char **argv)
{
  size_t numblocks, i;
  unsigned int start, end;
  char *dbfile;
  uninm_blocks_db db;
  const char *name;

  setlocale (LC_ALL, "");
  dbfile = uninm_find_blocks_db (NULL);
  if (dbfile == NULL)
    exit (1);
  db = uninm_blocks_db_open (dbfile);
  free (dbfile);
  if (db == NULL)
    exit (1);
  numblocks = uninm_num_blocks (db);
  for (i = 0; i < numblocks; i++)
    {
      start = uninm_block_start (db, i);
      end = uninm_block_end (db, i);
      name = uninm_block_name (db, i);
      if (name == NULL)
	exit (2);
      printf ("\-\-\\ni: %u\\nstart: %d\\nend: %d\\nblock name: %s\\n",
	      (unsigned int) i, start, end, name);
    }
  uninm_blocks_db_close (db);
}
.Ed
.\" .Sh ERRORS
.Sh SEE ALSO
.\" A make-libunicodenames-db(1) reference is inserted by the Makefile
 \" if that manpage is made.
.Xr uninm_find_names_db 3 %%make_libunicodenames_db_reference%%
.\" .Sh STANDARDS
.\" .Sh HISTORY
.Sh AUTHORS
.An Barry Schwartz
.Sh BUGS
The French translation of the Unicode names list is based on an older
Unicode standard.
